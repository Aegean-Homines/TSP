/*!
* \file tsp.h
* \author Egemen Koku
* \date 12 Mar 2017
* \brief Interface of @b tsp.cpp
*
* \copyright Digipen Institute of Technology
* \mainpage TSP
*
*/

#ifndef TSP_H
#define TSP_H

#include <vector>
#include <stack>
#include <map>


typedef std::vector< std::vector<int> > MAP; // The cost map between cities. Contains values from the txt file
typedef std::multimap<int, int> CostToIndexMap; //for ordering the tree branches, using cost as it's key value
typedef std::vector<CostToIndexMap> RecursionTreeRepresentation; // Each node's cheapest node map

/**
 * @brief Global function as the starting point for solving TSP problem.
 *
 * @param filename Name of the file that contains cost data between cities.
 * @return IDs of the cities in the tour generated.
 */
std::vector<int> SolveTSP(char const* filename); // Global function to be called from the driver

/**
 * @brief Helper class to handle recursion for the global SolveTSP function
 */
class TSPSolver {
public:
	/**
	 * @brief Recursive function for solving TSP
	 * @param currentNodeIndex The index of the city being discovered.
	 */
	void SolveTSPRecursively(int currentNodeIndex);

    /**
     * @brief Function declared to convert data in the stack to a vector.
     * @warning After the execution of this function, the stack will be empty.
     * @param pathToFill Final path as a vector, filled using the data on the path stack.
     */
	void GetBestPath(std::vector<int> & pathToFill);
private:

	unsigned int totalCity; // Number of cities in the map
	int bestCost; // Cost of the best path
	int totalCostSoFar; // Cost of the entire path in any steps of the execution

	MAP actualCostMap; // The cost map read from the file
	RecursionTreeRepresentation map; // Cheapest node map for all cities
	std::stack<int> currentPath; // Current path in the traversal
	std::stack<int> bestPath; // Best path generated by the traversal
	std::vector<bool> isVisited; // Used for faster checking whether a city is visited or not

    /**
     * @brief Helper function to calculate lower bound for the chosen city.
     *
     * @return Lower bound for the current state of the path.
     */
	int CalculateLowerBound();

    /**
     * @brief Helper function to read the map cost data from the file.
     * @param filename Name of the file that contains cost data between cities.
     */
	void read(char const* filename);

    /**
     * @brief Since the TSPSolver class should not be used by other files
     *
     * @param filename Name of the file that contains cost data between cities.
     * @return IDs of the cities in the tour generated.
     */
	friend std::vector<int> SolveTSP(char const* filename);

	// Constructor - Private because I don't want driver to use this willy-nilly
	// For me, this is the (hackish) equivalent of Java's private class
    /**
     * @brief Constructor of TSPSolver class.
     * @param filename Name of the file that contains cost data between cities.
     */
	TSPSolver(char const* filename);
};
#endif
